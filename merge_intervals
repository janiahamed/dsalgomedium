/*
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return
an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
*/

/* JAVA */
class Solution {
    public int[][] merge(int[][] intervals) {
        // Check for invalid or empty input
        if (intervals == null || intervals.length == 0) {
            return new int[0][];
        }

        List<ArrayList<Integer>> result = new ArrayList<>();
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        int start = intervals[0][0];
        int end = intervals[0][1];

        for (int i = 1; i < intervals.length; i++) {
            int currentStart = intervals[i][0];
            int currentEnd = intervals[i][1];

            if (currentStart <= end) {
                // Overlapping intervals, merge them
                start = Math.min(start, currentStart);
                end = Math.max(end, currentEnd);
            } else {
                // Non-overlapping interval, add the current merged interval to the result list
                ArrayList<Integer> mergedInterval = new ArrayList<>();
                mergedInterval.add(start);
                mergedInterval.add(end);
                result.add(mergedInterval);

                // Update start and end with the current interval's values
                start = currentStart;
                end = currentEnd;
            }
        }

        // Add the last interval to the result list
        ArrayList<Integer> mergedInterval = new ArrayList<>();
        mergedInterval.add(start);
        mergedInterval.add(end);
        result.add(mergedInterval);

        // Convert the result list to a 2D array
        int[][] mergedIntervalsArray = new int[result.size()][2];
        for (int i = 0; i < result.size(); i++) {
            mergedIntervalsArray[i][0] = result.get(i).get(0);
            mergedIntervalsArray[i][1] = result.get(i).get(1);
        }

        return mergedIntervalsArray;
    }
}
