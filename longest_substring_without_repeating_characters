/*
Given a string s, find the length of the longest substring without repeating characters.
Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/

/* JAVA */
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s.length() == 0) return 0;
        else if (s.length() == 1) return 1;
        else {
            HashSet <Character> hs = new HashSet<Character>();
            int max_length = 0;
            for (int k = 0; k < s.length(); k++) {
                hs.add(s.charAt(k));
                for (int i = k+1; i < s.length(); i++) { 
                    if (!hs.contains(s.charAt(i))) {
                        hs.add(s.charAt(i));
                        if (i == s.length()-1) {
                            max_length = Math.max(max_length,hs.size());
                            hs.clear();
                        }
                    }
                    else {
                        max_length = Math.max(max_length,hs.size());
                        hs.clear(); 
                        break;
                    }
                }
            }
            return max_length;
        }
    }
}

/* JAVA */
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the range [i, j]
        for (int j = 0, i = 0; j < n; j++) {
            if (map.containsKey(s.charAt(j))) {
                i = Math.max(map.get(s.charAt(j)), i);
            }
            ans = Math.max(ans, j - i + 1);
            map.put(s.charAt(j), j + 1);
        }
        return ans;
    }
}
