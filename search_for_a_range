/*
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
*/'
/* JAVA */
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int left = 0;
        int right = nums.length-1;
        int start = -1;
        int end = -1;
        
        while (left < nums.length) {
            if (nums[left] != target) {
                left++;
            }
            else {
                if (start == -1) {
                    start = left;
                }

                left++;
                if (end!= -1) break;
            }
            if (nums[right] != target) {
                if (end != -1) {
 
                    start = right+1;
                    break;
                }
                right--;
            }
            else {
                if (end == -1) {
                    end = right;
                }

                right--;
                if (start!= -1) break;
            }
        }
        return new int[]{start,end};
    }
}
