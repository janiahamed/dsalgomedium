/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored 
in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
*/
/* C */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    struct ListNode* head = NULL;
    struct ListNode* tail = NULL;   
    int carry = 0;
    while (l1 != NULL || l2 != NULL || carry != 0) {
        int temp = 0;
        if (l1 != NULL) {
            temp+=l1->val;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            temp+=l2->val;
            l2 = l2->next;
        }
        if (carry != 0) {
            temp+=carry;
            carry = 0;
        }
        int value = temp%10;
        carry = temp/10;
        struct ListNode* entry = (struct ListNode*) malloc (sizeof(struct ListNode));
        entry->val=value;
        entry->next = NULL;
        if( head == NULL) {
            head = entry;
            tail = entry;
        }
        else {
            tail->next = entry;
            tail = tail->next;
        }      
    }
    return head;
}
