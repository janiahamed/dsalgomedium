/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
*/

/* JAVA */
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        backtrack("", n, n, ans);
        return ans;
    }

    private void backtrack(String curr, int leftCount, int rightCount, List<String> ans) {
        if (leftCount == 0 && rightCount == 0) {
            ans.add(curr);
            return;
        }

        if (leftCount > 0) {
            backtrack(curr + "(", leftCount - 1, rightCount, ans);
        }

        if (rightCount > leftCount) {
            backtrack(curr + ")", leftCount, rightCount - 1, ans);
        }
    }
}
